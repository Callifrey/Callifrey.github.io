<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PAT-A1003</title>
    <url>/2020/08/01/PAT-A1003/</url>
    <content><![CDATA[<h1 id="PAT-A1003-Emergency"><a href="#PAT-A1003-Emergency" class="headerlink" title="PAT A1003 Emergency"></a>PAT A1003 Emergency</h1><hr>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><img src="/2020/08/01/PAT-A1003/patA1003.png" alt="patA1003"></p>
<a id="more"></a>
<hr>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>&#160; &#160; &#160; &#160;此题的思路较为清晰，不难从题目中直接看出是一道图的最短路径问题，可以采用传统的Dijkstra算法进行求解，唯一需要在意的便是此题不是求解最短路径的路径长度，而要求解两点之间最短路径的条数，以及路径上点权之和的最大值，由此设立num[i]和res[i]数组，在对最短路径进行优化的同时对两个数组的值做相应的更新。尤其应该注意的是在调整后路径长度一致的情况下，对res[i]的调整要满足能使总点权变大，否则不予调整，而num[i]不受限制，与点权无关。<br>&#160; &#160; &#160; &#160;这里是典型的Dijkstra算法的拓展应用，值得研究。</p>
<hr>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*PATA1003*/</span></span><br><span class="line"><span class="comment">/*Emergency*/</span></span><br><span class="line"><span class="comment">/*最短路径相关*/</span></span><br><span class="line"><span class="comment">/*邻接矩阵版*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">510</span>; <span class="comment">//最大节点数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> G[MAXN][MAXN];  <span class="comment">//图的邻接矩阵</span></span><br><span class="line"><span class="keyword">int</span> N,M;            <span class="comment">//城市数量以及道路数量</span></span><br><span class="line"><span class="keyword">bool</span> visit[MAXN] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Distance[MAXN];   <span class="comment">//最短距离数组</span></span><br><span class="line"><span class="keyword">int</span> Weight[MAXN];   <span class="comment">//城市资源数组</span></span><br><span class="line"><span class="keyword">int</span> num[MAXN] = &#123;<span class="number">0</span>&#125;;     <span class="comment">//最短路径条数</span></span><br><span class="line"><span class="keyword">int</span> res[MAXN] = &#123;<span class="number">0</span>&#125;;    <span class="comment">//从起点到终点的最大资源数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;   </span><br><span class="line">    <span class="built_in">fill</span>(Distance, Distance+MAXN, INF);    <span class="comment">//设定所有的最短距离均为INF</span></span><br><span class="line">    Distance[s] = <span class="number">0</span>;    <span class="comment">//起点到起点的最短距离为0；</span></span><br><span class="line">    num[s] = <span class="number">1</span>;         <span class="comment">//除去起点外，其他的点的最短路径数和最大资源总数均为0；</span></span><br><span class="line">    res[s] = Weight[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;    <span class="comment">//整个过程循环N次</span></span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>,MIN = INF;     <span class="comment">//注意，要将u和MIN定义在第一层for循环内，因为对于不同的终点要重新找最小的最短路径</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;    <span class="comment">//寻找最小的最短距离</span></span><br><span class="line">            <span class="keyword">if</span>(visit[j] == <span class="literal">false</span> &amp;&amp; Distance[j] &lt; MIN)&#123;</span><br><span class="line">                u = j;     <span class="comment">//记录序号</span></span><br><span class="line">                MIN = Distance[j];    <span class="comment">//更新最小距离</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>)    <span class="comment">//在未访问的节点中未找到比INF小的点</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//找到u之后</span></span><br><span class="line">        visit[u] = <span class="literal">true</span>;   <span class="comment">//访问</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;N;v++)&#123;    <span class="comment">//检查其他的点是否可以通过u来优化</span></span><br><span class="line">            <span class="keyword">if</span>(visit[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF )&#123;</span><br><span class="line">                <span class="keyword">if</span>(Distance[u]+G[u][v] &lt; Distance[v])&#123;   <span class="comment">//可以优化时</span></span><br><span class="line">                       Distance[v] = Distance[u] + G[u][v];   <span class="comment">//更新最短距离；</span></span><br><span class="line">                       num[v] = num[u];                       <span class="comment">//求解最短路径条数时在Dijkstra过程中加入num[]数组，初始起点num[s]为1，其余为0</span></span><br><span class="line">                       res[v] = res[u] + Weight[v];           <span class="comment">//能够优化路径时，num[v]继承num[u]</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(Distance[u]+G[u][v] == Distance[v])&#123;    <span class="comment">//路径长度一致</span></span><br><span class="line">                        </span><br><span class="line">                       num[v] += num[u];                     <span class="comment">//路径长度一致时，将num[u]累加到num[v]上</span></span><br><span class="line">                       <span class="keyword">if</span>(res[u]+Weight[v] &gt; res[v])</span><br><span class="line">                           res[v] = res[u] + Weight[v];</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> S,E;   <span class="comment">//起点与终点</span></span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">int</span> c1,c2,L;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;S&gt;&gt;E;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">        Weight[i] = temp;    <span class="comment">//读入每个城市的救援资源数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>]+MAXN*MAXN, INF);    <span class="comment">//邻接矩阵设为INF</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;  <span class="comment">//边读入</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c1&gt;&gt;c2&gt;&gt;L;</span><br><span class="line">        G[c1][c2] = L;</span><br><span class="line">        G[c2][c1] = L;</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(S);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; num[E]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;res[E];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>最小生成树算法——Prim &amp; Kruskal</title>
    <url>/2020/08/01/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="最小生成树算法——Prim-amp-Kruskal总结与代码实例"><a href="#最小生成树算法——Prim-amp-Kruskal总结与代码实例" class="headerlink" title="最小生成树算法——Prim &amp; Kruskal总结与代码实例"></a>最小生成树算法——Prim &amp; Kruskal总结与代码实例</h1><hr>
<h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><p>&#160;&#160;&#160;&#160;Prim算法的思想是：对于原始图G(V,E)，建立一个集合S，从图的某个顶点开始（顶点可以是指定顶点，也可以是随机的顶点），逐步从点集V-S中选择到S中顶点距离最小的顶点加入S，并把该条最短路径加入最小生成树。<br>       <a id="more"></a>在实现的过程中，Prim算法与求解单源最短路径算法Dijkstra算法几乎一致，唯一不同之处在于最短距离数组d[MAXN]的含义与处理方式。下面给出邻接矩阵版的prim算法的实现例子。</p>
<hr>
<h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*codeup 622A*/</span></span><br><span class="line"><span class="comment">/*稠密图的最小生成树算法—prim算法的应用*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> G[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> d[MAXN];</span><br><span class="line"><span class="keyword">bool</span> visit[MAXN] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fill</span>(d,d+MAXN,INF);</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;   <span class="comment">//序号1-N，默认从1开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;       <span class="comment">//循环N次</span></span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>,MIN = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visit[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN)&#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        visit[u] = <span class="literal">true</span>;</span><br><span class="line">        ans += d[u];     <span class="comment">//将最小的边加入</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=N;v++)&#123;     <span class="comment">//遍历通过u连接的路径</span></span><br><span class="line">            <span class="keyword">if</span>(visit[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF &amp;&amp; G[u][v] &lt; d[v])&#123;  <span class="comment">//顶点v未被访问且u-&gt;v有边且通过u可以使得v到最小生成树节点集合距离变小</span></span><br><span class="line">                d[v] = G[u][v];    <span class="comment">//更新距离</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(G[<span class="number">0</span>],G[<span class="number">0</span>]+MAXN*MAXN,INF);</span><br><span class="line">    <span class="keyword">int</span> c1,c2,cost;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N)&#123;</span><br><span class="line">      <span class="keyword">if</span>(N == <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N*(N<span class="number">-1</span>)/<span class="number">2</span>;i++)&#123;</span><br><span class="line">         <span class="built_in">cin</span>&gt;&gt;c1&gt;&gt;c2&gt;&gt;cost;</span><br><span class="line">          G[c1][c2] = G[c2][c1] = cost;</span><br><span class="line">      &#125;</span><br><span class="line">         <span class="built_in">cout</span>&lt;&lt;prim()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于Prim算法与Dijkstra算法一致，复杂度均为O(N^2)，故顶点的数量会影响算法的性能，所以Prim算法常被用于顶点数量较少而边数量较多（即稠密图）的情况，若是稀疏图，则应该尽量使用下面介绍的Kruskal算法</p>
<hr>
<h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><p> &#160;&#160;&#160;&#160;Kruskal 算法也是求解图的最小生成树的常用算法，与Prim算法不同，Kruskal算法采用的是”边贪心”的策略，即以图中的边为主导。其算法过程是首先将图中所有的顶点各自看成独立的连通块，然后对图中的各边按照边权从小到大的顺序进行排列，然后按照排序后的顺序遍历图的各个边。当处理一条边时，检查与该边相连的两个顶点是否属于同一个连通块，如果属于，则跳过该边，反之则将该边加入最小生成树，然后让最小生成树的边数量加1。当最小生成树的边的数量为顶点数量减一时，跳出遍历循环。结束边的遍历循环后，检查最小生成树的边的数量，若不是N-1,则表明原图不连通。<br>&#160;&#160;&#160;&#160;在实现Kruskal算法时有两个关键问题：一是如何知晓边的两个顶点属于同一连通块（如何表示连通块），二是如何将一条边加入最小生成树（如何表示一个最小生成树）。以上两个问题可以使用一个简单的结构来描述——并查集。判断是否属于同一连通块，就找寻两个顶点在并查集中的根结点是否一致，边加入最小生成树其实就是两个集合的合并过程。</p>
<p>下面给出基于并查集实现的Kruskal算法</p>
<h2 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200</span>;    <span class="comment">//定义最大顶点数与最大边数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXE = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//边集定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v;   <span class="comment">//起点，终点编号</span></span><br><span class="line">    <span class="keyword">int</span> cost;   <span class="comment">//边权</span></span><br><span class="line">&#125;E[MAXE];</span><br><span class="line"><span class="comment">//cmp()函数，用以sort()</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.cost &lt; b.cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[MAXN];   <span class="comment">//顶点的并查集</span></span><br><span class="line"><span class="comment">//寻找根结点函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = x;</span><br><span class="line">    <span class="keyword">while</span>(x != father[x])&#123;</span><br><span class="line">        x = father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//路径压缩，其实也可以不做</span></span><br><span class="line">    <span class="keyword">while</span>(a != father[a])&#123;</span><br><span class="line">        <span class="keyword">int</span> z = a;</span><br><span class="line">        a = father[a];</span><br><span class="line">        father[z] = x;    <span class="comment">//将查询顶点到根结点路径上所有的顶点的父节点均记为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;    <span class="comment">//返回根节点编号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Kruskal算法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num_edge = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        father[i] = i;     <span class="comment">//并查集初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    sort(E,E+m,cmp);    <span class="comment">//边结构体数组排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;   <span class="comment">//从小到大遍历边</span></span><br><span class="line">        <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">        <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">        <span class="keyword">if</span>(faU != faV)&#123;   <span class="comment">//如果边的两个顶点不再同一连通块</span></span><br><span class="line">            father[faU ] = faV;   <span class="comment">//合并</span></span><br><span class="line">            ans += E[i].cost;   <span class="comment">//边权累加</span></span><br><span class="line">            num_edge++;</span><br><span class="line">            <span class="keyword">if</span>(num_edge == n<span class="number">-1</span>)   <span class="comment">//最小生成树边数已达顶点数减一，跳出</span></span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num_edge != n<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    <span class="comment">//不连通</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;E[i].u&gt;&gt;E[i].v&gt;&gt;E[i].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = Kruskal(n,m);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
</search>
